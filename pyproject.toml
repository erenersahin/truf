[tool.poetry]
name = "truf"
version = "0.1.0"
description = ""
authors = ["Your Name <you@example.com>"]
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.10"
requests = "^2.31.0"

[tool.poetry.group.dev.dependencies]
isort = "^5.13.2"
ruff = "^0.1.13"
pre-commit = "^3.6.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
select = [
  "E",   # pycodestyle errors
  "W",   # pycodestyle warnings
  "F",   # pyflakes
  "UP",  # pyupgrade
  "C",   # flake8-comprehensions
  "B",   # flake8-bugbear
  "ANN", # flake8-annotations
  "S",   # flake8-bandit
]
ignore = [
  "E501",   # line too long, handled by black
  "B008",   # do not perform function calls in argument defaults
  "ANN401", # *args, **kwargs Any type
  "ANN101", # self annotation
  "ANN102", # cls annotation
]

[tool.ruff.per-file-ignores]
"__init__.py" = [
  "F401", # imports in init files
]
"**/tests/*.py" = [
  "S101", # use of assert
]
"**/api.py" = [
  "ANN201", # ninja routes do not work with return annotations
]

[tool.isort]
line_length = 88
multi_line_output = 3
include_trailing_comma = true
use_parentheses = true
force_grid_wrap = 0

[tool.pytest.ini_options]
addopts = [
  "--ds=config.settings",
  "--reuse-db",
  "--disable-socket",
  "--allow-unix-socket",
]
python_files = ["tests.py", "test_*.py"]

[tool.coverage.run]
include = ["app/*"]
omit = ["*migrations*", "*tests*"]

[tool.pyright]
autoSearchPaths = true
diagnosticMode = "openFilesOnly"
useLibraryCodeForTypes = true
typeCheckingMode = "basic"
reportPrivateUsage = false
reportPrivateImportUsage = false
